{
	"\n" print
} "lf" def

{
	dup * swap dup * + sqrt
} "vecnorm" stackdump def

{
	stacksize { pop stacksize } while
} "clearstack" def

{
	"__n" def
	__n 1 > {
		#__n print lf
		__n -1 rotate
		__n 1 - "__n" gdef
	__n 1 > } while
} "reverse" def

3 4 vecnorm print lf  # 5

1 2 3 4 5 6
2 roll stackdump
-2 roll stackdump
4 1 rotate stackdump
4 -2 rotate stackdump

stacksize print lf
pop stacksize print lf 5 stackdump

4 reverse stackdump

clearstack

"stacksize=" print stacksize print lf

"something" {"a string is rightfully true" print} {"HELP NO STOP ERROR" print} ifelse lf

{
	"Someone called my main function! args: " print
	stackdump
} "main" def
